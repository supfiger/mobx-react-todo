{"version":3,"sources":["store/TodoStore.js","store/index.js","components/Filters/Filters.js","components/Form/Form.js","components/List/List.js","components/Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoStore","list","filteredList","isInputEmpty","text","resetData","toggleComplete","id","map","todo","completed","setFocus","document","querySelector","focus","validate","length","todoGetDate","fullDate","Date","time","toLocaleString","hour","minute","day","month","getFullYear","updateList","now","date","editing","onAddTodo","onEnterPress","e","action","key","onSaveTodo","getEditingTodo","editingTodoIndex","findIndex","onEditTodo","clickedIndex","editingTodo","isEditing","clickedTodo","index","onDeleteTodo","filter","item","onChangeFormInput","target","value","onChangeTodoInput","onFilterList","name","onClearInput","onRenderPage","decorate","observable","persist","hydrate","create","this","inject","observer","props","store","className","onClick","classNames","inputWrapEmpty","type","placeholder","onChange","onKeyPress","reverseList","slice","reverse","isList","inputRef","useRef","useEffect","current","isCompleted","data-id","ref","textCrossOut","Boolean","window","location","hostname","match","configure","enforceActions","Root","Store","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.102cf945.chunk.js","sourcesContent":["import { decorate, observable, action } from \"mobx\";\r\nimport { persist } from \"mobx-persist\";\r\n\r\nexport default class TodoStore {\r\n  list = [];\r\n  filteredList = [];\r\n  isInputEmpty = null;\r\n  text = \"\";\r\n\r\n  resetData = () => {\r\n    this.isInputEmpty = null;\r\n    this.text = \"\";\r\n  };\r\n\r\n  toggleComplete = (id) => {\r\n    const list = [...this.list];\r\n\r\n    list.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed;\r\n        return todo;\r\n      }\r\n    });\r\n\r\n    this.list = list;\r\n  };\r\n\r\n  setFocus = () => {\r\n    const selector = document.querySelector(\".addTodoInput\");\r\n    selector.focus();\r\n  };\r\n\r\n  validate = (text) => {\r\n    return text !== \"\" && text.length < 50;\r\n  };\r\n\r\n  todoGetDate = () => {\r\n    const fullDate = new Date();\r\n    const time = `${fullDate.toLocaleString(\"default\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    })}`;\r\n    const day = `${fullDate.toLocaleString(\"default\", {\r\n      day: \"2-digit\",\r\n    })} ${fullDate.toLocaleString(\"en\", {\r\n      month: \"long\",\r\n    })} ${fullDate.getFullYear()}`;\r\n\r\n    const date = {\r\n      time,\r\n      day,\r\n    };\r\n\r\n    return date;\r\n  };\r\n\r\n  updateList = () => {\r\n    const list = [...this.list];\r\n\r\n    const todo = {\r\n      text: this.text,\r\n      id: Date.now(),\r\n      completed: false,\r\n      date: this.todoGetDate(),\r\n      editing: false,\r\n    };\r\n\r\n    this.list = [...list, todo];\r\n\r\n    this.resetData();\r\n  };\r\n\r\n  onAddTodo = () => {\r\n    const { text } = this;\r\n    const isValid = this.validate(text);\r\n\r\n    if (isValid) {\r\n      this.updateList();\r\n      this.setFocus();\r\n    } else {\r\n      this.isInputEmpty = true;\r\n    }\r\n  };\r\n\r\n  onEnterPress = (e, action, id) => {\r\n    if (e.key === \"Enter\") {\r\n      switch (action) {\r\n        case \"save\":\r\n          this.onSaveTodo(id);\r\n          break;\r\n        case \"add\":\r\n          this.onAddTodo();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  getEditingTodo = () => {\r\n    const list = [...this.list];\r\n\r\n    const editingTodoIndex = list.findIndex((todo) => todo.editing === true);\r\n    const editingTodo = list[editingTodoIndex];\r\n    return editingTodo;\r\n  };\r\n\r\n  onEditTodo = (id) => {\r\n    const list = [...this.list];\r\n    const clickedIndex = list.findIndex((todo) => todo.id === id);\r\n\r\n    const editingTodo = this.getEditingTodo();\r\n    const isEditing = editingTodo && editingTodo.editing;\r\n    const clickedTodo = list[clickedIndex];\r\n    const isValid = this.validate(clickedTodo.text);\r\n\r\n    if (isValid) {\r\n      clickedTodo.editing = !clickedTodo.editing;\r\n\r\n      if (isEditing) {\r\n        editingTodo.editing = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  onSaveTodo = (id) => {\r\n    const list = [...this.list];\r\n    const index = list.findIndex((todo) => todo.id === id);\r\n    const todo = list[index];\r\n    const isValid = this.validate(todo.text);\r\n\r\n    if (isValid) {\r\n      todo.editing = false;\r\n    }\r\n  };\r\n\r\n  onDeleteTodo = (id) => {\r\n    this.list = this.list.filter((item) => item.id !== id);\r\n  };\r\n\r\n  onChangeFormInput = (e) => {\r\n    this.text = e.target.value;\r\n    this.isInputEmpty = false;\r\n  };\r\n\r\n  onChangeTodoInput = (id, e) => {\r\n    const list = [...this.list];\r\n\r\n    const index = list.findIndex((todo) => todo.id === id);\r\n    const todo = list[index];\r\n\r\n    todo.text = e.target.value;\r\n  };\r\n\r\n  onFilterList = (e) => {\r\n    const filter = e.target.name;\r\n    const list = [...this.list];\r\n\r\n    switch (filter) {\r\n      case \"active\":\r\n        this.filteredList = list.filter((todo) => !todo.completed);\r\n        break;\r\n      case \"completed\":\r\n        this.filteredList = list.filter((todo) => todo.completed);\r\n        break;\r\n      case \"all\":\r\n        this.filteredList = [];\r\n        break;\r\n      case \"clear\":\r\n        this.filteredList = [];\r\n        this.list = [];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  onClearInput = () => {\r\n    this.text = \"\";\r\n  };\r\n\r\n  onRenderPage = () => {\r\n    this.setFocus();\r\n  };\r\n}\r\n\r\ndecorate(TodoStore, {\r\n  list: [observable, persist(\"list\")],\r\n  filteredList: [observable, persist(\"list\")],\r\n  isInputEmpty: [observable, persist],\r\n  text: [observable, persist],\r\n  resetData: action,\r\n  toggleComplete: action,\r\n  onChangeFormInput: action,\r\n  onChangeTodoInput: action,\r\n  updateList: action,\r\n  onAddTodo: action,\r\n  onEditTodo: action,\r\n  onSaveTodo: action,\r\n  onDeleteTodo: action,\r\n  onFilterList: action,\r\n  onClearInput: action,\r\n});\r\n","import { create } from \"mobx-persist\";\r\nimport TodoStore from \"./TodoStore\";\r\n\r\nconst hydrate = create();\r\n\r\nclass Store {\r\n  constructor() {\r\n    this.TodoStore = new TodoStore(this);\r\n    hydrate(\"TodoStore\", this.TodoStore);\r\n  }\r\n}\r\n\r\nexport default new Store();\r\n","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport \"./Filters.sass\";\r\n\r\nconst Filters = (props) => {\r\n  const { onFilterList } = props.store.TodoStore;\r\n\r\n  return (\r\n    <div className=\"Filters\">\r\n      <div className=\"filtersFixedWrap\">\r\n        <button name=\"active\" onClick={(e) => onFilterList(e)}>\r\n          Active\r\n        </button>\r\n        <button name=\"completed\" onClick={(e) => onFilterList(e)}>\r\n          Completed\r\n        </button>\r\n        <button name=\"all\" onClick={(e) => onFilterList(e)}>\r\n          All\r\n        </button>\r\n        <button name=\"clear\" onClick={(e) => onFilterList(e)}>\r\n          Clear List\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(\"store\")(observer(Filters));\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport \"./Form.sass\";\r\n\r\nconst Form = (props) => {\r\n  const {\r\n    text,\r\n    onChangeFormInput,\r\n    onAddTodo,\r\n    onEnterPress,\r\n    isInputEmpty,\r\n    onClearInput,\r\n  } = props.store.TodoStore;\r\n\r\n  return (\r\n    <div className=\"Form\">\r\n      <div\r\n        className={classNames(\"inputWrap\", {\r\n          inputWrapEmpty: isInputEmpty,\r\n        })}\r\n      >\r\n        <input\r\n          name=\"addTodo\"\r\n          className=\"addTodoInput\"\r\n          type=\"text\"\r\n          placeholder=\"Type something here...\"\r\n          value={text}\r\n          onChange={(e) => onChangeFormInput(e)}\r\n          onKeyPress={(e) => onEnterPress(e, \"add\")}\r\n        />\r\n        <button className=\"clearInputButton\" onClick={() => onClearInput()}>\r\n          ×\r\n        </button>\r\n      </div>\r\n      <div className=\"formButtons\">\r\n        <button className=\"addTodoButton\" onClick={() => onAddTodo()}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(\"store\")(observer(Form));\r\n","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport { Todo } from \"../index\";\r\nimport \"./List.sass\";\r\n\r\nconst List = (props) => {\r\n  const { list, filteredList } = props.store.TodoStore;\r\n\r\n  const currentList = filteredList.length > 0 ? filteredList : list;\r\n  const reverseList = currentList.slice().reverse();\r\n\r\n  const isList = reverseList !== null && reverseList.length > 0;\r\n\r\n  return (\r\n    <ul className=\"List\">\r\n      {isList && reverseList.map((todo) => <Todo key={todo.id} {...todo} />)}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default inject(\"store\")(observer(List));\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport \"./Todo.sass\";\r\n\r\nconst Todo = (props) => {\r\n  const {\r\n    completed,\r\n    text,\r\n    id,\r\n    editing,\r\n    date: { time, day },\r\n    store: {\r\n      TodoStore: {\r\n        onDeleteTodo,\r\n        toggleComplete,\r\n        onEditTodo,\r\n        onChangeTodoInput,\r\n        onSaveTodo,\r\n        onEnterPress,\r\n      },\r\n    },\r\n  } = props;\r\n\r\n  const inputRef = useRef();\r\n\r\n  useEffect(() => {\r\n    editing && inputRef.current.focus();\r\n  });\r\n\r\n  const editTodo = () => {\r\n    onEditTodo(id);\r\n  };\r\n\r\n  return (\r\n    <li className=\"Todo\">\r\n      <div\r\n        onClick={() => toggleComplete(id)}\r\n        className={classNames(\"todoCompleted\", { isCompleted: completed })}\r\n      >\r\n        {completed && `✓`}\r\n      </div>\r\n      {editing ? (\r\n        <div className=\"editTodoWrap\">\r\n          <input\r\n            name=\"editTodo\"\r\n            data-id={id}\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => onChangeTodoInput(id, e)}\r\n            onKeyPress={(e) => onEnterPress(e, \"save\", id)}\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={() => onSaveTodo(id)}>Save</button>\r\n        </div>\r\n      ) : (\r\n        <div className={classNames(\"todoText\", { textCrossOut: completed })}>\r\n          {text}\r\n        </div>\r\n      )}\r\n      <div className=\"todoActions\">\r\n        <div\r\n          onClick={editTodo}\r\n          className={classNames(\"todoEdit\", { editing: editing })}\r\n        >\r\n          ✎\r\n        </div>\r\n        <div onClick={() => onDeleteTodo(id)} className=\"todoDelete\">\r\n          ×\r\n        </div>\r\n      </div>\r\n      <div className=\"todoDate\">\r\n        <div className=\"todoTime\">{time}</div>\r\n        <div className=\"todoDay\">{day}</div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default inject(\"store\")(observer(Todo));\r\n","import React, { useEffect } from \"react\";\r\nimport { inject } from \"mobx-react\";\r\n\r\nimport { List, Form, Filters } from \"./components/index\";\r\nimport \"./App.sass\";\r\n\r\nconst App = (props) => {\r\n  useEffect(() => props.store.TodoStore.onRenderPage());\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"content\">\r\n        <h2 className=\"appTitle\">Todo app</h2>\r\n        <Form />\r\n        <List />\r\n        <Filters />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(\"store\")(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport { configure } from \"mobx\";\n\nimport Store from \"./store/\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconfigure({ enforceActions: \"observed\" });\n\nconst Root = () => (\n  <Provider store={Store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.querySelector(\"#root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}